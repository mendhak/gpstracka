<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpGps</name>
    </assembly>
    <members>
        <member name="T:SharpGis.SharpGps.SerialPort">
            <summary>
            Class for handling serial communications with the GPS receiver
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.SerialPort.#ctor">
            <summary>
            Initilializes the serialport
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.SerialPort.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.SerialPort.Open">
            <summary>
            Opens the GPS port ans starts parsing data
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.SerialPort.Start">
            <summary>
            Opens the serial port and starts parsing NMEA data. Returns when the port is closed.
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.SerialPort.Read">
            <summary>
            Check the serial port for data. If data is available, data is read and parsed.
            This is a loop the keeps running until the port is closed.
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.SerialPort.Write(System.Byte[])">
            <summary>
            Writes data to serial port. This is useful for sending DGPS data to the device.
            </summary>
            <param name="BufBytes">Data to write to serial port</param>
        </member>
        <member name="M:SharpGis.SharpGps.SerialPort.FireEvent(SharpGis.SharpGps.GPSEventType,System.String)">
            <summary>
            Fires a NewGPSFix event
            </summary>
            <param name="type">Type of GPS event (GPGGA, GPGSA, etx...)</param>
            <param name="sentence">NMEA Sentence</param>
        </member>
        <member name="M:SharpGis.SharpGps.SerialPort.Stop">
            <summary>
            Closes the port and ends the thread.
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.SerialPort.GetNmeaString(System.String)">
            <summary>
            Extracts a full NMEA string from the data recieved on the serialport, and parses this.
            The remaining and unparsed NMEA string is returned.
            </summary>
            <param name="strNMEA">NMEA ASCII data</param>
            <returns>Unparsed NMEA data</returns>
        </member>
        <member name="M:SharpGis.SharpGps.SerialPort.CheckSentence(System.String)">
            <summary>
            Checks the checksum of a NMEA sentence
            </summary>
            <remarks>
            The optional checksum field consists of a "*" and two hex digits 
            representing the exclusive OR of all characters between, but not
            including, the "$" and "*".  A checksum is required on some
            sentences.
            </remarks>
            <param name="strSentence">NMEA Sentence</param>
            <returns>'true' of checksum is correct</returns>
        </member>
        <member name="P:SharpGis.SharpGps.SerialPort.TimeOut">
            <summary>
            Gets or sets the timeout in seconds.
            <remarks>5 second default</remarks>
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.SerialPort.Port">
            <summary>
            Serial port
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.SerialPort.BaudRate">
            <summary>
            BaudRate
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.SerialPort.IsPortOpen">
            <summary>
            Species whether the serialport is open or not
            </summary>
        </member>
        <member name="E:SharpGis.SharpGps.SerialPort.NewGPSData">
            <summary>
            Event fired whenever new GPS data is acquired from the receiver.
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.SerialPort.NewGPSDataHandler">
            <summary>
            Delegate type for hooking up change notifications.
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.SerialPort.GPSEventArgs">
            <summary>
            Eventtype parsed when GPS sends a sentence
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.SerialPort.GPSEventArgs.TypeOfEvent">
            <summary>
            Type of event that occured, specied by NMEA type (GPRMC, GPGGA, GPGSA, GPGLL, GPGSV or PGRME)
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.SerialPort.GPSEventArgs.Sentence">
            <summary>
            The complete NMEA sentence received
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.NMEA.GPGSV">
            <summary>
            Satellites in view
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.NMEA.GPGSV.#ctor">
            <summary>
            Initializes NMEA "Satellites in view"
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.NMEA.GPGSV.AddSentence(System.String)">
            <summary>
            Adds a GPGSV sentence, and parses it. 
            </summary>
            <param name="NMEAsentence">NMEA string</param>
            <returns>Returns true if this is the last message in GSV nmea sentences</returns>
        </member>
        <member name="M:SharpGis.SharpGps.NMEA.GPGSV.GetSatelliteByPRN(System.String)">
            <summary>
            Returns 
            </summary>
            <param name="PRN"></param>
            <returns></returns>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGSV.SatsInView">
            <summary>
            Number of satellites visible
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGSV.Satellites">
            <summary>
            List of visible satellites
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.NMEA.GPGSV.Satellite">
            <summary>
            Space Vehicle (SV/Satellite) info structure
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NMEA.GPGSV.Satellite.PRN">
            <summary>
            Pseudo-Random Number ID
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NMEA.GPGSV.Satellite.Elevation">
            <summary>
            Elevation above horizon in degrees (0-90)
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NMEA.GPGSV.Satellite.Azimuth">
            <summary>
            Azimuth	in degrees (0-359)
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NMEA.GPGSV.Satellite.SNR">
            <summary>
            Signal-to-noise ratio in dBHZ (0-99)
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.Coordinate">
            <summary>
            Represents a coordinate in spherical space
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.Coordinate.#ctor">
            <summary>
            Initializes a coordinate object
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.Coordinate.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a coordinate object
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.Coordinate.Distance(SharpGis.SharpGps.Coordinate)">
            <summary>
            Distance in meters, using the Harversine Formula (Great circle).
            </summary>
            <param name="other"></param>
            <returns>Distance in meters</returns>
            <remarks>
            See:
            http://en.wikipedia.org/wiki/Great-circle_distance
            http://williams.best.vwh.net/avform.htm (Aviation Formulary)
            </remarks>
        </member>
        <member name="M:SharpGis.SharpGps.Coordinate.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpGis.SharpGps.Coordinate.ToString(System.String)">
            <summary>
            Valid formats: 
            String.Empty or "D": Decimal degrees
            DM: Degrees, minutes
            DMS: Degrees, minutes seconds
            </summary>
            <param name="format">Formatting string</param>
            <returns></returns>
        </member>
        <member name="M:SharpGis.SharpGps.Coordinate.ToString(System.String,System.IFormatProvider)">
            <summary>
            Valid formats: 
            String.Empty or "D": Decimal degrees
            DM: Degrees, minutes
            DMS: Degrees, minutes seconds
            </summary>
            <param name="format">Formatting string</param>
            <param name="formatProvider">IFormatProvider</param>
            <returns></returns>
        </member>
        <member name="P:SharpGis.SharpGps.Coordinate.Latitude">
            <summary>
            Latitude
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.Coordinate.Longitude">
            <summary>
            Longitude
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.GPSHandler">
            <summary>
            GPS Handler - GPS Library for Pocket PC
            Released under GNU Lesser General Public License
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.GPSHandler.GPRMC">
            <summary>
            Recommended minimum specific GPS/Transit data
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.GPSHandler.GPGGA">
            <summary>
            Global Positioning System Fix Data
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.GPSHandler.GPGSV">
            <summary>
            Satellites in view
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.GPSHandler.GPGSA">
            <summary>
            GPS DOP and active satellites
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.GPSHandler.GPGLL">
            <summary>
            Geographic position, Latitude and Longitude
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.GPSHandler.PGRME">
            <summary>
            Estimated Position Error - Garmin proprietary sentence(!)
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.GPSHandler.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a GpsHandler for communication with GPS receiver.
            The GpsHandler is used for communication with the GPS device and process information from the GPS revice.
            </summary>
            <param name="Parent">Parent form which callbacks should be directed to.</param>
            <example>
            The following example demonstrates how to create an GpsHandler instance that reacts to GPS position events.
            <code>
            [C#]
            public class Form1 : System.Windows.Forms.Form
            {
            	public static GPSHandler GPS;
            	public Form1()
            	{
            	InitializeComponent();
            	//Initialize GPS handler
            	GPS = new GPSHandler(this); 
            	//Hook up GPS data events to a handler
            	GPS.NewGPSFix += new GPSHandler.NewGPSFixHandler(this.GPSEventHandler);
            }
            
            public void ExitApp()
            {
            	GPS.Dispose();  //Closes serial port and cleans up
            	Application.Exit();
            }
            
            private void GPSEventHandler(object sender, GPSHandler.GPSEventArgs e)
            {
            	switch (e.TypeOfEvent)
            	{
            		case GPSEventType.GPRMC:  //Recommended minimum specific GPS/Transit data
            			if(GPS.HasGPSFix) //Is a GPS fix available?
            			{
            				lbPosition.Text = GPS.RMC.Longitude.ToString() + "," + GPS.RMC.Latitude.ToString();
            				lbHeading.Text = GPS.RMC.Course.ToString();
            				lbSpeed.Text = GPS.RMC.Speed.ToString() + " mph";
            				lbTimeOfFix.Text = GPS.RMC.TimeOfFix + " - " + GPS.RMC.DateOfFix;
            			}
            			else
            			{
            				lbPosition.Text = "No fix";
            				lbHeading.Text = "N/A";
            				lbSpeed.Text = "N/A";
            				lbTimeOfFix.Text = "N/A";
            			}
            			break;
            	}
            }
            
            private void btnStartGPS_Click(object sender, System.EventArgs e)
            {
            	if(!GPS.IsPortOpen) 
            	{
            		try
            		{
            			//Open serial port 1 at 4800baud               
            			GPS.Start("COM1",4800);
            		}
            		catch(System.Exception ex) 
            		{
            			MessageBox.Show("An error occured when trying to open port: " + ex.Message);
            		}
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:SharpGis.SharpGps.GPSHandler.GPSEventHandler(System.Object,SharpGis.SharpGps.GPSHandler.GPSEventArgs)">
            <summary>
            Parse event from GPS thread to parent thread
            </summary>
            <param name="sender">Sender</param>
            <param name="e">GPSEventArgs</param>
        </member>
        <member name="M:SharpGis.SharpGps.GPSHandler.EnableEmulate(System.String)">
            <summary>
            Turns on NMEA emulation
            </summary>
            <param name="FileName">File to read NMEA sentences from</param>
        </member>
        <member name="M:SharpGis.SharpGps.GPSHandler.Start(System.String,System.Int32)">
            <summary>
            Starts the GPS thread and opens the port.
            </summary>
            <param name="BaudRate">Baudrate (usually 4800).</param>
            <param name="serialPort">Serialport number where GPS receiver is connected (ie. "COM1").</param>
        </member>
        <member name="M:SharpGis.SharpGps.GPSHandler.WriteToGPS(System.Byte[])">
            <summary>
            Writes data to the GPS device. For instance RTCM data for Differential GPS.
            </summary>
            <param name="buffer">RTCM or control data to send to GPS</param>
        </member>
        <member name="M:SharpGis.SharpGps.GPSHandler.GPSDataEventHandler(System.Object,SharpGis.SharpGps.SerialPort.GPSEventArgs)">
            <summary>
            Method called when a GPS event occured.
            This is where we call the methods that parses each kind of NMEA sentence
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SharpGis.SharpGps.GPSHandler.Stop">
            <summary>
            Stops the GPS thread and closes the port.
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.GPSHandler.Dispose">
            <summary>
            Disposes the GpsHandler and if nessesary calls Stop()
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.GPSHandler.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.GPSHandler.FireTimeOut">
            <summary>
            Private method for Firing a serialport timeout event
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.GPSHandler.ParseGLL(System.String)">
            <summary>
            Private method for parsing the GPGLL NMEA sentence
            </summary>
            <param name="strGLL">GPGLL sentence</param>
        </member>
        <member name="M:SharpGis.SharpGps.GPSHandler.ParseGSV(System.String)">
            <summary>
            Private method for parsing the GPGSV NMEA sentence
            GPGSV is a bit different, since it if usually made from several NMEA sentences
            </summary>
            <param name="strGSV">GPGSV sentence</param>
        </member>
        <member name="M:SharpGis.SharpGps.GPSHandler.ParseGSA(System.String)">
            <summary>
            Private method for parsing the GPGSA NMEA sentence
            </summary>
            <param name="strGSA">GPGSA sentence</param>
        </member>
        <member name="M:SharpGis.SharpGps.GPSHandler.ParseGGA(System.String)">
            <summary>
            Private method for parsing the GPGGA NMEA sentence
            </summary>
            <param name="strGGA">GPGGA sentence</param>
        </member>
        <member name="M:SharpGis.SharpGps.GPSHandler.ParseRMC(System.String)">
            <summary>
            Private method for parsing the GPRMC NMEA sentence
            </summary>
            <param name="strRMC">GPRMC sentence</param>
        </member>
        <member name="M:SharpGis.SharpGps.GPSHandler.ParseRME(System.String)">
            <summary>
            Private method for parsing the PGRME NMEA sentence
            </summary>
            <param name="strRME">GPRMC sentence</param>
        </member>
        <member name="M:SharpGis.SharpGps.GPSHandler.GPSToDecimalDegrees(System.String,System.String)">
            <summary>
            Converts GPS position in d"dd.ddd' to decimal degrees ddd.ddddd
            </summary>
            <param name="DM"></param>
            <param name="Dir"></param>
            <returns></returns>
        </member>
        <member name="M:SharpGis.SharpGps.GPSHandler.dblTryParse(System.String,System.Double@)">
            <summary>
            Internal class for parsing doubles. This replaces the Double.TryParse() method that isn't supported by CF.
            </summary>
            <remarks>Uses EN-us format for parsing doubles</remarks>
            <param name="str">string to parse</param>
            <param name="result">Output result. 0 if parse failed</param>
            <returns>true if parse was succesfull</returns>
        </member>
        <member name="M:SharpGis.SharpGps.GPSHandler.String2Eventtype(System.String)">
            <summary>
            Analyzes a NMEA sentence and returns the corresponding NMEA sentence type
            </summary>
            <param name="strData">NMEA Sentence</param>
            <returns>Sentence type</returns>
        </member>
        <member name="E:SharpGis.SharpGps.GPSHandler.NewGPSFix">
            <summary>
            Overridden. Fires when the GpsHandler has received data from the GPS device.
            </summary>
        </member>
        <member name="E:SharpGis.SharpGps.GPSHandler._NewGPSFix">
            <summary>
            Event fired whenever new GPS data has been processed. Runs in GPS thread
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.GPSHandler.IsPortOpen">
            <summary>
            Gets a boolean stating whether the port to the GPS device is open.
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.GPSHandler.HasGPSFix">
            <summary>
            Get a boolean stating whether the GPS device has a fix or not.
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.GPSHandler.GPSAccuracy">
            <summary>
            Returns Garmin estimated horisontal error. This is Garmin proprietary message and may not function with all GPS devices.
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.GPSHandler.Emulate">
            <summary>
            Indicates whether NMEA input is emulated from file
            </summary>
            <returns>true of emulate is on</returns>
        </member>
        <member name="P:SharpGis.SharpGps.GPSHandler.TimeOut">
            <summary>
            Gets or sets the GpsHandler TimeOut (default: 5 seconds).
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.GPSHandler.NewGPSFixHandler">
            <summary>
            A delegate type for hooking up change notifications.
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.GPSHandler.GPSEventArgs">
            <summary>
            Eventtype invoked when a new message is received from the GPS.
            String GPSEventArgs.TypeOfEvent specifies eventtype.
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.GPSHandler.GPSEventArgs.TypeOfEvent">
            <summary>
            Type of event
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.GPSHandler.GPSEventArgs.Sentence">
            <summary>
            Full NMEA sentence
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.NMEA.GPRMC">
            <summary>
            Recommended minimum specific GPS/Transit data
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.NMEA.GPRMC.#ctor">
            <summary>
            Initializes the NMEA Recommended minimum specific GPS/Transit data
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.NMEA.GPRMC.#ctor(System.String)">
            <summary>
            Initializes the NMEA Recommended minimum specific GPS/Transit data and parses an NMEA sentence
            </summary>
            <param name="NMEAsentence"></param>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPRMC.Status">
            <summary>
            Indicates the current status of the GPS receiver.
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPRMC.Position">
            <summary>
            Coordinate of recieved position
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPRMC.Speed">
            <summary>
            Groundspeed in knots.
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPRMC.Course">
            <summary>
            Course (true, not magnetic) in decimal degrees.
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPRMC.MagneticVariation">
            <summary>
            MagneticVariation in decimal degrees.
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPRMC.TimeOfFix">
            <summary>
            Date and Time of fix - Greenwich mean time.
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.NMEA.GPRMC.StatusEnum">
            <summary>
            Enum for the Receiver Status information.
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NMEA.GPRMC.StatusEnum.Warning">
            <summary>
            Fix warning
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NMEA.GPRMC.StatusEnum.OK">
            <summary>
            Fix OK
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NMEA.GPRMC.StatusEnum.BadFix">
            <summary>
            Bad fix
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NMEA.GPRMC.StatusEnum.GPS">
            <summary>
            GPS fix
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NMEA.GPRMC.StatusEnum.DGPS">
            <summary>
            Differential GPS fix
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.NTRIP.NTRIPClient">
            <summary>
            Networked Transport of RTCM via Internet Protocol (Ntrip) is an application-level protocol that
            supports streaming Global Navigation Satellite System (GNSS) data over the Internet. Ntrip is a
            generic, stateless protocol based on the Hypertext Transfer Protocol HTTP/1.1. The HTTP
            objects are extended to GNSS data streams.
            </summary>
            <remarks>
            <para>Ntrip is designed to disseminate differential correction data or other kinds of GNSS streaming
            data to stationary or mobile users over the Internet, allowing simultaneous PC, Laptop, PDA, or
            receiver connections to a broadcasting host. Ntrip supports wireless Internet access through
            Mobile IP Networks like GSM, GPRS, EDGE, or UMTS.</para>
            <para>Ntrip is meant to be an open non-proprietary protocol. Major characteristics of Ntrip’s
            dissemination technique are the following:</para>
            <para>• It is based on the popular HTTP streaming standard; it is comparatively easy to implement
            when limited client and server platform resources are available.<br/>
            • Its application is not limited to one particular plain or coded stream content; it has the ability
            to distribute any kind of GNSS data.<br/>
            • It has the potential to support mass usage; it can disseminate hundreds of streams
            simultaneously for up to a thousand users when applying modified Internet Radio
            broadcasting software.<br/>
            • Regarding security needs, stream providers and users are not necessarily in direct contact,
            and streams are usually not blocked by firewalls or proxy servers protecting Local Area
            Networks.<br/>
            • It enables streaming over any mobile IP network because it uses TCP/IP.</para>
            </remarks>
        </member>
        <member name="M:SharpGis.SharpGps.NTRIP.NTRIPClient.CreateRequest(System.String)">
            <summary>
            Creates request to NTRIP server
            </summary>
            <param name="strRequest">Resource to request. Leave blank to get NTRIP service data</param>
        </member>
        <member name="M:SharpGis.SharpGps.NTRIP.NTRIPClient.StartNTRIP(System.String)">
            <summary>
            Opens the connection to the NTRIP server and starts receiving
            </summary>
            <param name="MountPoint">ID of Stream</param>
        </member>
        <member name="M:SharpGis.SharpGps.NTRIP.NTRIPClient.StopNTRIP">
            <summary>
            Stops receiving data from the NTRIP server
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.NTRIP.NTRIPClient.ToBase64(System.String)">
            <summary>
            Apply AsciiEncoding to user name and password to obtain it as an array of bytes
            </summary>
            <param name="str">username:password</param>
            <returns>Base64 encoded username/password</returns>
        </member>
        <member name="P:SharpGis.SharpGps.NTRIP.NTRIPClient.UserName">
            <summary>
            NTRIP server Username
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NTRIP.NTRIPClient.Password">
            <summary>
            NTRIP server password
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NTRIP.NTRIPClient.BroadCaster">
            <summary>
            NTRIP Server
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.NMEA.GPGLL">
            <summary>
            Geographic position, Latitude and Longitude
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.NMEA.GPGLL.#ctor">
            <summary>
            Initializes the NMEA Geographic position, Latitude and Longitude
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.NMEA.GPGLL.#ctor(System.String)">
            <summary>
            Initializes the NMEA Geographic position, Latitude and Longitude and parses an NMEA sentence
            </summary>
            <param name="NMEAsentence"></param>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGLL.Position">
            <summary>
            Current position
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGLL.TimeOfSolution">
            <summary>
            UTC Of Position Solution
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGLL.DataValid">
            <summary>
            Data valid (true for valid or false for data invalid).
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.NMEA.GPGSA">
            <summary>
            GPS DOP and active satellites
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.NMEA.GPGSA.#ctor">
            <summary>
            Initializes the NMEA GPS DOP and active satellites
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.NMEA.GPGSA.#ctor(System.String)">
            <summary>
             GPS DOP and active satellites and parses an NMEA sentence
            </summary>
            <param name="NMEAsentence"></param>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGSA.Mode">
            <summary>
            Mode. M=Manuel, A=Auto (forced/not forced to operate in 2D or 3D mode)
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGSA.FixMode">
            <summary>
            Fix not available / 2D / 3D
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGSA.PRNInSolution">
            <summary>
            PRN Numbers used in solution
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGSA.PDOP">
            <summary>
            Point Dilution of Precision
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGSA.HDOP">
            <summary>
            Horisontal Dilution of Precision
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGSA.VDOP">
            <summary>
            Vertical Dilution of Precision
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.NMEA.GPGSA.GSAFixModeEnum">
            <summary>
            Enum for the GSA Fix mode
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NMEA.GPGSA.GSAFixModeEnum.FixNotAvailable">
            <summary>
            No fix available
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NMEA.GPGSA.GSAFixModeEnum._2D">
            <summary>
            Horisontal fix only
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NMEA.GPGSA.GSAFixModeEnum._3D">
            <summary>
            3D fix
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.ControlInvoker">
            <summary>
            Control.Invoke allows a method to be invoked on the same thread as the one
            the control was created on.  Unlike in the full .NET Framework, the .NET
            Compact Framework does not support the Control.Invoke overload for passing an 
            array of objects to pass as arguments.  This ControlInvoker class overcomes
            this limitation.
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.ControlInvoker.#ctor(System.Windows.Forms.Control)">
            <summary>
            The constructor typically takes a form
            If not, this could be changed to an object.
            </summary>
            <param name="control">Control or Form that it should invoke</param>
        </member>
        <member name="M:SharpGis.SharpGps.ControlInvoker.Invoke(SharpGis.SharpGps.MethodCallInvoker,System.Object[])">
            <summary>
            The delegate wrapping the method and its arguments 
            to be called on the same thread as the control.
            </summary>
            <param name="invoker"></param>
            <param name="arguments"></param>
        </member>
        <member name="T:SharpGis.SharpGps.NMEA.GPGGA">
            <summary>
            Global Positioning System Fix Data
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.NMEA.GPGGA.#ctor">
            <summary>
            Initializes the NMEA Global Positioning System Fix Data
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.NMEA.GPGGA.#ctor(System.String)">
            <summary>
            Initializes the NMEA Global Positioning System Fix Data and parses an NMEA sentence
            </summary>
            <param name="NMEAsentence"></param>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGGA.TimeOfFix">
            <summary>
            time of fix (hhmmss).
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGGA.Position">
            <summary>
            Coordinate of recieved position
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGGA.FixQuality">
            <summary>
            Fix quality (0=invalid, 1=GPS fix, 2=DGPS fix)
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGGA.NoOfSats">
            <summary>
            number of satellites being tracked.
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGGA.Altitude">
            <summary>
            Altitude above sea level.
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGGA.AltitudeUnits">
            <summary>
            Altitude Units - M (meters).
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGGA.Dilution">
            <summary>
            Horizontal dilution of position (HDOP).
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGGA.HeightOfGeoid">
            <summary>
            Height of geoid (mean sea level) above WGS84 ellipsoid.
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGGA.DGPSUpdate">
            <summary>
            Time in seconds since last DGPS update.
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPGGA.DGPSStationID">
            <summary>
            DGPS station ID number.
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.NMEA.GPGGA.FixQualityEnum">
            <summary>
            Enum for the GGA Fix Quality.
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NMEA.GPGGA.FixQualityEnum.Invalid">
            <summary>
            Invalid fix
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NMEA.GPGGA.FixQualityEnum.GPS">
            <summary>
            GPS fix
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NMEA.GPGGA.FixQualityEnum.DGPS">
            <summary>
            DGPS fix
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPDataStream">
            <summary>
            Data streams
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPDataStream.MountPoint">
            <summary>
            Caster mountpoint
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPDataStream.Identifier">
            <summary>
            Source identifier, e.g. name of city next to source location
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPDataStream.Format">
            <summary>
            Data format RTCM, RAW, etc.
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPDataStream.FormatDetails">
            <summary>
            E.g. RTCM message types or RAW data format etc., update rates in parenthesis in seconds
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPDataStream.Carrier">
            <summary>
            Data stream contains carrier phase information<br/>
            0 = No (e.g. for DGPS)<br/>
            1 = Yes, L1 (e.g. for RTK)<br/>
            2 = Yes, L1 &amp; L2 (e.g. for RTK)<br/>
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPDataStream.NavSystem">
            <summary>
            Navigation system(s)
            <remarks>Examples: GPS, GPS+GLO, EGNOS</remarks>
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPDataStream.NetWork">
            <summary>
            Network. Example: EUREF, IGS, IGLOS, SAPOS, GREF, Misc
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPDataStream.Country">
            <summary>
            Three character country code in ISO 3166
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPDataStream.Latitude">
            <summary>
            Position, latitude, north (approximate position in case of nmea = 1)
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPDataStream.Longitude">
            <summary>
            Position, longitude, east (approximate position in case of nmea = 1)
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPDataStream.NMEA">
            <summary>
            Necessity for Client to send NMEA message with approximate position to Caster.<br/>
            0 = Client must not send NMEA message with approximate position to Caster.<br/>
            1 = Client must send NMEA GGA message with approximate position to Caster.<br/>
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPDataStream.Solution">
            <summary>
            Stream generated from single reference station or from networked reference stations.<br/>
            0 = Single base, 1 = Network
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPDataStream.Generator">
            <summary>
            Hard- or software generating data stream
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPDataStream.Compression">
            <summary>
            Compression algorithm
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPDataStream.Authentication">
            <summary>
            Access protection for this particular data stream<br/>
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPDataStream.Fee">
            <summary>
            User fee required for receiving this particular data stream<br/>
            false = No user fee<br/>
            true = Usage is charged
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPDataStream.BitRate">
            <summary>
            Bitrate of data stream, bits per second 
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPDataStream.Miscellanous">
            <summary>
            Miscellaneous information
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPCaster">
            <summary>
            The NtripCaster is basically an HTTP server supporting a subset of HTTP request/response
            messages and adjusted to low-bandwidth streaming data (from 50 up to 500 Bytes/sec per
            stream). The NtripCaster accepts request-messages on a single port from either the NtripServer
            or the NtripClient. Depending on these messages, the NtripCaster decides whether there is
            streaming data to receive or to send.
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPCaster.Host">
            <summary>
            Caster Internet host domain name or IP address
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPCaster.Identifier">
            <summary>
            Caster identifier, e.g. name of provider
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPCaster.Operator">
            <summary>
            Name of institution / agency / company operating the Caster
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPCaster.NMEA">
            <summary>
            Capability of Caster to receive NMEA message with approximate position from Client
            </summary>
            <remarks>
            false = Caster is not able to handle incoming NMEA message with approximate position from Client<br/>
            true = Caster is able to handle incoming NMEA GGA message with approximate position from Client
            </remarks>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPCaster.Country">
            <summary>
            Three character country code in ISO 3166
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPCaster.Latitude">
            <summary>
            Position, latitude, north
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPCaster.Longitude">
            <summary>
            Position, longitude, east
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPCaster.FallbackHost">
            <summary>
            Fallback Caster IP address
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPNetwork">
            <summary>
            Networks of data streams
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPNetwork.Identifier">
            <summary>
            Network identifier, e.g. name of a network of GNSS permanent reference stations
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPNetwork.Operator">
            <summary>
            Name of institution / agency / company operating the network
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPNetwork.Authentication">
            <summary>
            Access protection for data streams of the network<br/>
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPNetwork.Fee">
            <summary>
            Specifies whether a user fee is required for receiving data streams from this network
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPNetwork.WebAddress">
            <summary>
            Web-address for network information
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPNetwork.WebStream">
            <summary>
            Web-address for stream information
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.NTRIP.SourceTable.NTRIPNetwork.WebRegistration">
            <summary>
            Web address or mail address for registration
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.NTRIP.SourceTable.AuthenticationType">
            <summary>
            Type of Authentication required
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.GPSEventType">
            <summary>
            GPSEventType
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.GPSEventType.GPRMC">
            <summary>
            Recommended minimum specific GPS/Transit data
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.GPSEventType.GPGGA">
            <summary>
            Global Positioning System Fix Data
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.GPSEventType.GPGSV">
            <summary>
            Satellites in view
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.GPSEventType.GPGSA">
            <summary>
            GPS DOP and active satellites
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.GPSEventType.GPGLL">
            <summary>
            Geographic position, Latitude and Longitude
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.GPSEventType.PGRME">
            <summary>
            Estimated Position Error - Garmin proprietary sentence(!)
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.GPSEventType.TimeOut">
            <summary>
            Data timeout event fired when data haven't been received from GPS device for a while
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.GPSEventType.Unknown">
            <summary>
            GPS sentence not recognized, unknown or not implemented
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.GPSEventType.FixLost">
            <summary>
            Fired when Fix is lost (to be implemented)
            </summary>
        </member>
        <member name="F:SharpGis.SharpGps.GPSEventType.FixAquired">
            <summary>
            Fired when valid Fix is acquired (to be implemented)
            </summary>
        </member>
        <member name="T:SharpGis.SharpGps.NMEA.GPRME">
            <summary>
            Estimated Position Error
            The following are Garmin proprietary sentences.  "P" denotes
            proprietary, "GRM" is Garmin's manufacturer code.
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.NMEA.GPRME.#ctor">
            <summary>
            Initializes the NMEA Estimated Position Error
            </summary>
        </member>
        <member name="M:SharpGis.SharpGps.NMEA.GPRME.#ctor(System.String)">
            <summary>
            Initializes the NMEA Estimated Position Error and parses an NMEA sentence
            </summary>
            <param name="NMEAsentence"></param>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPRME.EstHorisontalError">
            <summary>
            Estimated horizontal position error in metres (HPE)
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPRME.EstVerticalError">
            <summary>
            Estimated vertical error (VPE) in metres
            </summary>
        </member>
        <member name="P:SharpGis.SharpGps.NMEA.GPRME.EstSphericalError">
            <summary>
            Overall spherical equivalent position error
            </summary>
        </member>
    </members>
</doc>
